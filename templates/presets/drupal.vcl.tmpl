sub vcl_recv {

#    {{ $exclude_urls := (getenv "VARNISH_DRUPAL_EXCLUDE_URLS" "^(/update\\.php|/([a-z]{2}/)?admin|/([a-z]{2}/)?admin/.*|/([a-z]{2}/)?system/files/.*|/([a-z]{2}/)?flag/.*|.*/ajax/.*|.*/ahah/.*)$") }}

    # Pass through any administrative or AJAX-related paths.
#    if (req.url ~ "{{ $exclude_urls }}") {
#        return (pass);
#    }
    # Début req.url = xyz / Ajouté pour config avec varnish_auth
    # Do not cache these paths. (varnish_auth)
    if (req.url ~ "^.*\.php*" ||
      req.url ~ "^/ooyala/ping$" ||
      req.url ~ "^/admin" ||
      req.url ~ "^/admin/.*$" ||
      req.url ~ "^/user" ||
      req.url ~ "^/user/.*$" ||
      req.url ~ "^/users/.*$" ||
      req.url ~ "^/info/.*$" ||
      req.url ~ "^/flag/.*$" ||
      req.url ~ "^.*/ajax/.*$" ||
      req.url ~ "^.*/ahah/.*$" ||
      req.url ~ "^.*/node/.*/edit.*$" ||
      req.url ~ "^.*/esi/.*$") {
      return (pass);
    }
    # Fin req.url = xyz / Ajouté pour config avec varnish_auth
    # Début NO_CACHE cookie / Ajouté pour config avec varnish_auth
    // Check for NO_CACHE cookie, (varnish_auth)
    // this should take prevalence over authenticated session cookies
    // And general session cookies
    if (req.http.Cookie ~ "^.*NO_CACHE.*$" || req.url ~ "^.*NO_CACHE.*$") {
      return (pass);
    }
    # Fin NO_CACHE cookie / Ajouté pour config avec varnish_auth


    if (req.url ~ "(^/([a-z]{2}/)?batch)") {
        return (pipe);
    }
    # Début Authenticated cached requests / Ajouté pour config avec varnish_auth
    // Authenticated cached requests
    // Check for...
    // 1) We are on the correct domain
    // 2) It's a GET or HEAD request
    // 3) We're not on a restart
    // 4) They have the USE_VARNISH_AUTH cookie
    if (req.http.host ~ "^.*sst.local.*$"
      && (req.method == "GET" || req.method == "HEAD")
      && req.restarts == 0
      && req.http.Cookie ~ "^.*USE_VARNISH_AUTH.*$"
    ) {
      // Unset a varnish auth header (in case for some reason it was sent by the client).
      unset req.http.X-Varnish-Auth;
      // Rewrite the request with a check
      set req.http.X-Original-URL = req.url;
      set req.url = "/profiles/portail/modules/custom/varnish_auth/access_check.php";
    }
    # Fin Authenticated cached requests / Ajouté pour config avec varnish_auth

    # Remove all cookies that Drupal doesn't need to know about. We explicitly
    # list the ones that Drupal does need, the SESS and NO_CACHE. If, after
    # running this code we find that either of these two cookies remains, we
    # will pass as the page cannot be cached.
    if (req.http.Cookie) {
        # 1. Append a semi-colon to the front of the cookie string.
        # 2. Remove all spaces that appear after semi-colons.
        # 3. Match the cookies we want to keep, adding the space we removed
        #    previously back. (\1) is first matching group in the regsuball.
        # 4. Remove all other cookies, identifying them by the fact that they have
        #    no space after the preceding semi-colon.
        # 5. Remove all spaces and semi-colons from the beginning and end of the
        #    cookie string.
        set req.http.Cookie = ";" + req.http.Cookie;
        set req.http.Cookie = regsuball(req.http.Cookie, "; +", ";");
        set req.http.Cookie = regsuball(req.http.Cookie, ";(SESS[a-z0-9]+|SSESS[a-z0-9])=", "; \1=");
        set req.http.Cookie = regsuball(req.http.Cookie, ";[^ ][^;]*", "");
        set req.http.Cookie = regsuball(req.http.Cookie, "^[; ]+|[; ]+$", "");

        if (req.http.Cookie == "") {
            # If there are no remaining cookies, remove the cookie header. If there
            # aren't any cookie headers, Varnish's default behavior will be to cache
            # the page.
            unset req.http.Cookie;
        }
        else {
            # If there is any cookies left (a session or NO_CACHE cookie), do not
            # cache the page. Pass it on to Apache directly.
            return (pass);
        }
    }

#    # Remove all cookies that Drupal doesn't need to know about. We explicitly
#    # list the ones that Drupal does need, the SESS and NO_CACHE. If, after
#    # running this code we find that either of these two cookies remains, we
#    # will pass as the page cannot be cached.
#    if (req.http.Cookie) {
#        {{ $preserved_cookies := (getenv "VARNISH_DRUPAL_PRESERVED_COOKIES" "SESS[a-z0-9]+|SSESS[a-z0-9]+|NO_CACHE") }}
#
#        # 1. Append a semi-colon to the front of the cookie string.
#        # 2. Remove all spaces that appear after semi-colons.
#        # 3. Match the cookies we want to keep, adding the space we removed
#        #    previously back. (\1) is first matching group in the regsuball.
#        # 4. Remove all other cookies, identifying them by the fact that they have
#        #    no space after the preceding semi-colon.
#        # 5. Remove all spaces and semi-colons from the beginning and end of the
#        #    cookie string.
#        set req.http.Cookie = ";" + req.http.Cookie;
#        set req.http.Cookie = regsuball(req.http.Cookie, "; +", ";");
#        set req.http.Cookie = regsuball(req.http.Cookie, ";({{ $preserved_cookies }})=", "; \1=");
#        set req.http.Cookie = regsuball(req.http.Cookie, ";[^ ][^;]*", "");
#        set req.http.Cookie = regsuball(req.http.Cookie, "^[; ]+|[; ]+$", "");
#
#        if (req.http.Cookie == "") {
#            # If there are no remaining cookies, remove the cookie header. If there
#            # aren't any cookie headers, Varnish's default behavior will be to cache
#            # the page.
#            unset req.http.Cookie;
#        }
#        else {
#            # If there is any cookies left (a session or NO_CACHE cookie), do not
#            # cache the page. Pass it on to Apache directly.
#            return (pass);
#        }
#    }
}
